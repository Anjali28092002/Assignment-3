use mavenmovies;

-- Assignment 3--
-- 1. **Rank the customers based on the total amount they've spent on rentals.** 

 SELECT 
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    SUM(p.amount) AS total_amount_spent
FROM 
    payment p
INNER JOIN 
    customer c ON p.customer_id = c.customer_id
GROUP BY 
    c.customer_id
ORDER BY 
    total_amount_spent DESC;
-- 2. **Calculate the cumulative revenue generated by each film over time.**
Select
 f.film_id,
    f.title AS film_title,
    SUM(p.amount) AS cumulative_revenue
FROM
    film f
INNER JOIN
    inventory i ON f.film_id = i.film_id
INNER JOIN
    rental r ON i.inventory_id = r.inventory_id
INNER JOIN
    payment p ON r.rental_id = p.rental_id
GROUP BY
    f.film_id, f.title
ORDER BY
    cumulative_revenue DESC;
    
    
-- 3. **Determine the average rental duration for each film, considering films with similar lengths.**

 SELECT
    f.film_id,
    f.title AS film_title,
    f.length AS film_length,
    AVG(f.rental_duration) AS average_rental_duration
FROM
    film f
GROUP BY
    f.length
ORDER BY
    f.length;
-- 4. **Identify the top 3 films in each category based on their rental counts.**

 WITH RankedFilms AS (
    SELECT
        fc.category_id,
        f.film_id,
        f.title AS film_title,
        ROW_NUMBER() OVER (PARTITION BY fc.category_id ORDER BY COUNT(r.rental_id) DESC) AS rank
    FROM
        film f
    INNER JOIN
        film_category fc ON f.film_id = fc.film_id
    INNER JOIN
        rental r ON f.film_id = r.film_id
    GROUP BY
        fc.category_id, f.film_id
)
SELECT
    rf.category_id,
    rf.film_id,
    rf.film_title,
    c.name AS category_name,
    rf.rank
FROM
    RankedFilms rf
INNER JOIN
    category c ON rf.category_id = c.category_id
WHERE
    rf.rank <= 3
ORDER BY
    rf.category_id, rf.rank;
    
    
    
-- 5. **Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.**
 SELECT 
    category.name AS category_name,
    film.film_id,
    film.title AS film_title,
    COUNT(rental.rental_id) AS rental_count
FROM 
    film
JOIN 
    film_category ON film.film_id = film_category.film_id
JOIN 
    category ON film_category.category_id = category.category_id
JOIN 
    inventory ON film.film_id = inventory.film_id
JOIN 
    rental ON inventory.inventory_id = rental.inventory_id
GROUP BY 
    category.category_id, film.film_id
ORDER BY 
    category.category_id, rental_count DESC


-- 6. **Find the monthly revenue trend for the entire rental store over time.**

 SELECT 
    DATE_FORMAT(payment_date, '%Y-%m') AS month,
    SUM(amount) AS monthly_revenue
FROM 
    payment
GROUP BY 
    YEAR(payment_date), MONTH(payment_date)
ORDER BY 
    YEAR(payment_date), MONTH(payment_date)
    
    
-- 7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**

SELECT 
    customer_id,
    CONCAT(first_name, ' ', last_name) AS customer_name,
    total_spending
FROM (
    SELECT 
        c.customer_id,
        c.first_name,
        c.last_name,
        SUM(p.amount) AS total_spending,
        (SELECT 
            PERCENTILE_CONT(0.8) WITHIN GROUP (ORDER BY SUM(amount) DESC)
         FROM 
            payment
        ) AS top_20_threshold
    FROM 
        customer c
    JOIN 
        payment p ON c.customer_id = p.customer_id
    GROUP BY 
        c.customer_id
) AS customer_spending
WHERE 
    total_spending >= top_20_threshold
ORDER BY 
    total_spending DESC;
    
    
-- 8. **Calculate the running total of rentals per category, ordered by rental count.**
 SELECT 
    category.name AS category_name,
    COUNT(rental.rental_id) AS rental_count,
    SUM(COUNT(rental.rental_id)) OVER (ORDER BY COUNT(rental.rental_id) DESC) AS running_total
FROM 
    category
LEFT JOIN 
    film_category ON category.category_id = film_category.category_id
LEFT JOIN 
    film ON film_category.film_id = film.film_id
LEFT JOIN 
    inventory ON film.film_id = inventory.film_id
LEFT JOIN 
    rental ON inventory.inventory_id = rental.inventory_id
GROUP BY 
    category.category_id
ORDER BY 
    rental_count DESC;
-- 9. **Find the films that have been rented less than the average rental count for their respective categories.**

 SELECT 
    f.film_id,
    f.title AS film_title,
    COUNT(r.rental_id) AS rental_count,
    AVG(rental_count_per_category.avg_rental_count) AS avg_rental_count_per_category
FROM 
    film f
LEFT JOIN 
    film_category fc ON f.film_id = fc.film_id
LEFT JOIN 
    rental r ON f.film_id = r.inventory_id
JOIN (
    SELECT 
        film_category.category_id,
        COUNT(rental.rental_id) AS avg_rental_count
    FROM 
        film_category
    LEFT JOIN 
        inventory ON film_category.film_id = inventory.film_id
    LEFT JOIN 
        rental ON inventory.inventory_id = rental.inventory_id
    GROUP BY 
        film_category.category_id
) AS rental_count_per_category ON fc.category_id = rental_count_per_category.category_id
GROUP BY 
    f.film_id
HAVING 
    COUNT(r.rental_id) < AVG(rental_count_per_category.avg_rental_count)
ORDER BY 
    rental_count DESC;
    
    
    
-- 10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**


 SELECT
    DATE_FORMAT(payment_date, '%Y-%m') AS month,
    SUM(amount) AS revenue
FROM
    payment
GROUP BY
    DATE_FORMAT(payment_date, '%Y-%m')
ORDER BY
    revenue DESC
LIMIT 5;